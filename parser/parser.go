package parser

import (
	"fmt"
	"strconv"

	"github.com/mycok/monkey_interpreter/ast"
	"github.com/mycok/monkey_interpreter/lexer"
	"github.com/mycok/monkey_interpreter/token"
)

const (
	_             int = iota
	LOWEST            // Lowest rank after _
	EQUALS            // ==
	LESSORGREATER     // > OR <
	SUM               // +
	PRODUCT           // *
	PREFIX            // -X OR !X OR +X
	CALL              // fn() OR myFunction(x)
)

var precedences = map[token.TokenType]int{
	token.EQ:       EQUALS,
	token.NOTEQ:    EQUALS,
	token.LT:       LESSORGREATER,
	token.GT:       LESSORGREATER,
	token.PLUS:     SUM,
	token.MINUS:    SUM,
	token.SLASH:    PRODUCT,
	token.ASTERISK: PRODUCT,
}

type (
	prefixParseFn func() ast.Expression
	infixParseFn  func(ast.Expression) ast.Expression
)

// Parser represents a Parser object / type.
type Parser struct {
	l              *lexer.Lexer
	currToken      token.Token
	peekToken      token.Token
	errors         []string
	prefixParseFns map[token.TokenType]prefixParseFn
	infixParseFns  map[token.TokenType]infixParseFn
}

// New returns an initialized instance of a Parser.
func New(l *lexer.Lexer) *Parser {
	p := &Parser{
		l:      l,
		errors: []string{},
	}

	p.prefixParseFns = make(map[token.TokenType]prefixParseFn)
	p.registerPrefix(token.IDENT, p.parseIdentifier)
	p.registerPrefix(token.INT, p.parseIntegerLiteral)
	p.registerPrefix(token.MINUS, p.parsePrefixExpression)
	p.registerPrefix(token.BANG, p.parsePrefixExpression)
	p.registerPrefix(token.PLUS, p.parsePrefixExpression)

	p.infixParseFns = make(map[token.TokenType]infixParseFn)
	p.registerInfix(token.PLUS, p.parseInfixExpression)
	p.registerInfix(token.MINUS, p.parseInfixExpression)
	p.registerInfix(token.ASTERISK, p.parseInfixExpression)
	p.registerInfix(token.SLASH, p.parseInfixExpression)
	p.registerInfix(token.EQ, p.parseInfixExpression)
	p.registerInfix(token.NOTEQ, p.parseInfixExpression)
	p.registerInfix(token.GT, p.parseInfixExpression)
	p.registerInfix(token.LT, p.parseInfixExpression)

	// Read two tokens so that both currToken & peekToken are set.
	p.nextToken()
	p.nextToken()

	return p
}

func (p *Parser) registerPrefix(tokenType token.TokenType, fn prefixParseFn) {
	p.prefixParseFns[tokenType] = fn
}

func (p *Parser) registerInfix(tokenType token.TokenType, fn infixParseFn) {
	p.infixParseFns[tokenType] = fn
}

// Errors returns p.errors slice of string errors.
func (p *Parser) Errors() []string {
	return p.errors
}

func (p *Parser) nextToken() {
	p.currToken = p.peekToken
	p.peekToken = p.l.NextToken()
}

// ParseProgram return an instance of *ast.Program as the root node with all the
// parsed statements as child nodes.
func (p *Parser) ParseProgram() *ast.Program {
	program := &ast.Program{}
	program.Statements = []ast.Statement{}

	for !p.curTokenIs(token.EOF) {
		stmt := p.parseStatement()
		if stmt != nil {
			program.Statements = append(program.Statements, stmt)
		}

		p.nextToken()
	}

	return program
}

func (p *Parser) parseStatement() ast.Statement {
	switch p.currToken.Type {
	case token.LET:
		return p.parseLetStatement()
	case token.RETURN:
		return p.parseReturnStatement()
	default:
		return p.parseExpressionStatement()
	}
}

func (p *Parser) parseLetStatement() *ast.LetStatement {
	// Create a Statement instance with the current p.currToken which in this case
	// should be a token of LET type.
	stmt := &ast.LetStatement{Token: p.currToken}

	if !p.peekExpectedType(token.IDENT) {
		return nil
	}

	// Create an Identifier instance with the current p.currToken which in this case
	// should be the IDENTIFIER token value after the LET token value. The current p.currToken
	// is generated by calling p.peekExpectedType helper which in turn calls p.nextToken().
	stmt.Name = &ast.Identifier{Token: p.currToken, Value: p.currToken.Literal}

	if !p.peekExpectedType(token.ASSIGN) {
		return nil
	}

	// TODO: Add expression parsing functionality.

	// Loop through the expression until a semicolon token is reached which in this
	// case means the end of the statement.
	for !p.curTokenIs(token.SEMICOLON) {
		p.nextToken()
	}

	return stmt
}

func (p *Parser) parseReturnStatement() *ast.ReturnStatement {
	// Create a Statement instance with the current p.currToken which in this case
	// should be a token of LET type.
	stmt := &ast.ReturnStatement{Token: p.currToken}
	p.nextToken()

	// TODO: Add expression parsing functionality.

	// Loop through the expression until a semicolon token is reached which in this
	// case means the end of the statement.
	for !p.curTokenIs(token.SEMICOLON) {
		p.nextToken()
	}

	return stmt
}

func (p *Parser) parseExpressionStatement() *ast.ExpressionStatement {
	stmt := &ast.ExpressionStatement{Token: p.currToken}
	stmt.Expression = p.parseExpression(LOWEST)

	if p.peekTokenIs(token.SEMICOLON) {
		// Calling p.nextToken at this point returns a semicolon token. This means that
		// when the ParseProgram loop calls p.nextToken after this, "" / EOF token type which represents
		// EOF or end of file will be returned as p.currToken. This EOF token will cause the ParseProgram method loop to terminate.
		p.nextToken()
	}

	return stmt
}

func (p *Parser) parseExpression(precedence int) ast.Expression {
	// Perform a parse function lookup from p.prefixParseFns map.
	parseFn := p.prefixParseFns[p.currToken.Type]
	if parseFn == nil {
		p.noPrefixParseFnError(p.currToken.Type)

		return nil
	}

	expression := parseFn()

	// Check if the next token is not a semicolon and also if the next token precedence
	// is higher than the precedence argument.
	for !p.peekTokenIs(token.SEMICOLON) && precedence < p.peekPrecedence() {
		parseFn := p.infixParseFns[p.peekToken.Type]
		if parseFn == nil {
			return expression
		}

		p.nextToken()

		expression = parseFn(expression)
	}

	return expression
}

// Start*****token type parse methods*****
func (p *Parser) parseIdentifier() ast.Expression {
	return &ast.Identifier{Token: p.currToken, Value: p.currToken.Literal}
}

func (p *Parser) parseIntegerLiteral() ast.Expression {
	lit := &ast.IntegerLiteral{Token: p.currToken}

	intValue, err := strconv.ParseInt(p.currToken.Literal, 0, 64)
	if err != nil {
		msg := fmt.Sprintf("could not parse %q as integer", p.currToken.Literal)
		p.errors = append(p.errors, msg)
	}

	lit.Value = intValue

	return lit
}

func (p *Parser) parsePrefixExpression() ast.Expression {
	exp := &ast.PrefixExpression{
		Token:    p.currToken,
		Operator: p.currToken.Literal,
	}

	p.nextToken()

	exp.Right = p.parseExpression(PREFIX)

	return exp
}

func (p *Parser) parseInfixExpression(left ast.Expression) ast.Expression {
	exp := &ast.InfixExpression{
		Token:    p.currToken, // p.currToken is the operator of the infix expression.
		Left:     left,
		Operator: p.currToken.Literal,
	}

	precedence := p.curPrecedence()

	p.nextToken()

	exp.Right = p.parseExpression(precedence)

	return exp
}

// End*****token type parse methods*****

func (p *Parser) noPrefixParseFnError(t token.TokenType) {
	msg := fmt.Sprintf("no prefix parse function for %s found", t)
	p.errors = append(p.errors, msg)
}

func (p *Parser) curTokenIs(t token.TokenType) bool {
	return p.currToken.Type == t
}

func (p *Parser) peekTokenIs(t token.TokenType) bool {
	return p.peekToken.Type == t
}

func (p *Parser) peekExpectedType(t token.TokenType) bool {
	if p.peekTokenIs(t) {
		p.nextToken()

		return true
	}

	p.peekError(t)
	return false
}

func (p *Parser) peekError(t token.TokenType) {
	msg := fmt.Sprintf("expected next token to be %s, got: %s instead", t, p.peekToken.Type)
	p.errors = append(p.errors, msg)
}

func (p *Parser) peekPrecedence() int {
	if p, ok := precedences[p.peekToken.Type]; ok {
		return p
	}

	return LOWEST
}

func (p *Parser) curPrecedence() int {
	if p, ok := precedences[p.currToken.Type]; ok {
		return p
	}

	return LOWEST
}
